{"data":{"markdownRemark":{"html":"<h3>電腦結構 Computer Architecture</h3>\n<p>中央處理 (Central Processing Unit, CPU)：</p>\n<ul>\n<li>解釋或執行儲存在電腦主記憶體（Main Memory，主存）的基體電路（Integrated Circuit, IC, 集成电路），負責與 I/O 設備交互（如滑鼠、鍵盤）。</li>\n</ul>\n<p>暫存器(registers)</p>\n<ul>\n<li>\n<p>CPU 內含少量且快速的電腦記憶體 -- 暫存器（registers ，寄存器），提供快速共同存取數值來加速電腦程式的執行，可用來暫存指令、資料和位置。暫存器包含：</p>\n<ul>\n<li>指令暫存器（Instruction Register, IR） 和</li>\n<li>程式計數器（Progrem Counter, PC, 程序计数器）</li>\n</ul>\n</li>\n</ul>\n<p>RAM (Random Access Memory 隨機存取記憶體)：</p>\n<ul>\n<li>與 CPU 直接交換資料的記憶體，不負責永久存儲，斷電會丟數據。</li>\n<li>RAM, DRAM, RRAM ?</li>\n</ul>\n<h3>程式運行</h3>\n<ul>\n<li>當程式運行時，會被從硬件讀進 RAM (Random Access Memory 記憶體)</li>\n<li>operating system （作業系統，或稱操作系统）會將 RAM 分成 run-time stack 與 heap</li>\n<li>operating system 會讓 CPU 將執行程式，從硬件讀取相關數據</li>\n<li>每個指令，都會從 RAM 中獲取一小部分數據並執行再返回</li>\n<li>最後將結果縣市在螢幕或其他設備 </li>\n</ul>\n<h3>時間複雜度 Time complexity</h3>\n<ul>\n<li>O(1)：it is a constant time operation or program</li>\n</ul>\n<h3>空間複雜度</h3>\n<h3>Declarative programming V.S. imperative programming</h3>\n<ul>\n<li>做菜：洗菜、切菜、煮菜</li>\n<li>做菜（菜）</li>\n</ul>\n<h3>Scope</h3>\n<ul>\n<li>LEGB</li>\n</ul>\n<h3>Run-Time Stack &#x26; Heap</h3>\n<h3>Reference:</h3>\n<ul>\n<li><a href=\"https://link.springer.com/book/10.1007/978-3-319-13072-9\">Data Structures and Algorithms with Python</a> Chapter 2 - Chapter 3</li>\n<li><a href=\"https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X\">Computer Systems A Programmers's Perspective 3 Edition</a> Chapter 1</li>\n</ul>","frontmatter":{"title":"數據結構與算法（一）","description":"時間複雜度與遞歸","date":"June 15th 2019"}},"site":{"siteMetadata":{"siteURL":"http://zoeliao.blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/computer/"}}