{"data":{"markdownRemark":{"html":"<h3>Sets and Maps</h3>\n<ul>\n<li>Sets: 沒有重複值的集合。如 [1, 2] 是一個 set，但[1, 1, 2] 不是，因為 1 重複兩次。[1, 2] 內含有 n = 2 個值，我們稱一個 set 內含的值的數量 n 為「基數」(cardinality)， ( n 為 >= 0 的正整數) 。</li>\n<li>Maps: 字典 (dictionary) 或是哈希表 (hash table)</li>\n</ul>\n<h3>Python 的 Sets</h3>\n<p>Python 內建 (built-in) 的 sets 分為兩種：</p>\n<ul>\n<li>set：可變的 (mutable) 集合。</li>\n<li>forzenset：不可變 (immutable) 的集合。</li>\n<li>s：變數(variable)，t：可迭代的序列(iterable sequence)</li>\n</ul>\n<h3>Python 的 hash</h3>\n<ul>\n<li>A randomly accessible list means any location within the list can be accessed in O(1) time. To access a location in a list we need the index of the location we wish to access. The index serves as the address of an item in the list. </li>\n<li>Without the index we would have to search for the item in the list which would take O(n) time, not O(1) time</li>\n<li>mutable objects like list mat not be hashable</li>\n<li><strong>hash</strong> 可以自定義哈希</li>\n</ul>\n<h3>hashSet class</h3>\n<ul>\n<li>\n<p>python 透過 hashset 來實現 set，減少運行的時間 (O(n^2) -> O(n)) </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class HashSet:\ndef __init__(self, contents = []):\n    self.items = [None] * 10\n    self.numItems = 0\n\n    for item in contents:\n        self.add(item)</code></pre></div>\n</li>\n</ul>\n<h3>Storing an Item</h3>\n<ul>\n<li>用 % mod 計算餘數 (remainder)，當作索引 index ，故 0 &#x3C; index &#x3C; len(哈希表) - 1</li>\n</ul>\n<h3>Collision Resolution</h3>\n<ul>\n<li>\n<p>當想將 3 以及 -7 放入長度為 10 的哈希表時，因為 3 與 -7 除 10 後的所得的餘數都是 3，如果都作為它們的 index 會有衝突 (collision)。</p>\n</li>\n<li>\n<p>Linear Probing：</p>\n<ul>\n<li>Python 透過 None 和 __Placeholder 檢測下一個位置是否為空。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    idx <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n    loc<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> items<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> items<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> item<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># item already in set return False</span>\n    <span class=\"token keyword\">if</span> loc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> HashSet<span class=\"token punctuation\">.</span>__Placeholder<span class=\"token punctuation\">:</span>\n            loc <span class=\"token operator\">=</span> idx\n        idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> loc<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        loc <span class=\"token operator\">=</span> idx\n    items<span class=\"token punctuation\">[</span>loc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"數據結構與算法（三）","description":"時間複雜度與遞歸","date":"June 22nd 2019"}},"site":{"siteMetadata":{"siteURL":"http://zoeliao.blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/data-structures-algorithms-with-python-03/"}}